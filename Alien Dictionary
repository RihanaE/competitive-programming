#User function Template for python3
from collections import defaultdict

class Solution:
    def findOrder(self,alien_dict, N, K):
    # code here
    
        alien_dict = list(alien_dict)
        graph = defaultdict(list)
        weight = defaultdict(int)
        pointer2 = 0
        start = 97
        
        for i in range(K):
            weight[chr(start + i)] = 0

        for i in range(N - 1):
            
            pointer = 0
            if alien_dict[i][pointer] == alien_dict[i + 1][pointer]:
                while i + 1 < N and pointer < len(alien_dict[i]) and pointer < len(alien_dict[i + 1]) and alien_dict[i][pointer] == alien_dict[i + 1][pointer]:
                    pointer += 1
                    
            if i + 1 < N and pointer < len(alien_dict[i]) and pointer < len(alien_dict[i + 1]) and alien_dict[i][pointer] == alien_dict[i + 1][pointer]:
                graph[alien_dict[i + 1][pointer]].append(alien_dict[i][pointer])
                weight[alien_dict[i][pointer]] += 1
                
            
         
        ans = []
        res = []
        for i in range(K):
            if weight[chr(97 + i)] == 0:
                ans.append(chr(97 + i))
                res.append(chr(97 + i))
                
 
        visited = set([ans[0]])
        stack = [ans[0]]
        
        while stack:
            node = stack.pop()
            
            for neigh in graph[node]:
                if weight[neigh] != 0:
                    weight[neigh] -= 1
                    visited.add(neigh)
                    
                    
                    if weight[neigh] == 0:
                        res.append(neigh)
                        stack.append(neigh)
                        
        
        if len(visited) == K:
            return res[::-1]
            
        return res[::-1]


#{ 
 # Driver Code Starts
#Initial Template for Python 3

class sort_by_order:
    def __init__(self,s):
        self.priority = {}
        for i in range(len(s)):
            self.priority[s[i]] = i
    
    def transform(self,word):
        new_word = ''
        for c in word:
            new_word += chr( ord('a') + self.priority[c] )
        return new_word
    
    def sort_this_list(self,lst):
        lst.sort(key = self.transform)

if __name__ == '__main__':
    t=int(input())
    for _ in range(t):
        line=input().strip().split()
        n=int(line[0])
        k=int(line[1])
        
        alien_dict = [x for x in input().strip().split()]
        duplicate_dict = alien_dict.copy()
        ob=Solution()
        order = ob.findOrder(alien_dict,n,k)
        s = ""
        for i in range(k):
            s += chr(97+i)
        l = list(order)
        l.sort()
        l = "".join(l)
        if s != l:
            print(0)
        else:
            x = sort_by_order(order)
            x.sort_this_list(duplicate_dict)
            
            if duplicate_dict == alien_dict:
                print(1)
            else:
                print(0)


# } Driver Code Ends
