# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        res = 0
        total = 0
        store = defaultdict(int)
        store[0] += 1
        
        def helper(root, targetSum, store, total):
            nonlocal res
            if not root:
                return 
            
            
            total += root.val
            
            
            if total - targetSum in store:
                res += store[total - targetSum]
            
            store[total] += 1
            
            helper(root.left, targetSum, store, total)
            helper(root.right, targetSum, store, total)
          
            store[total] -= 1
        
            
                
        helper(root, targetSum, store, total)
        
        return res
#         res = 0
        
#         def dfs(node, sm):
#             nonlocal res
            
            
#             if sm + node.val == targetSum:
#                 print(node)
#                 res += 1
                
#             if not node.left and not node.right:
#                 return
            
#             if node.right:
#                 dfs(node.right, sm + node.val)
#                 dfs(node.right, 0)
                
#             if node.left:
#                 dfs(node.left, sm + node.val)
#                 dfs(node.left, 0)
                
            
                
#         dfs(root, 0)
#         return res
